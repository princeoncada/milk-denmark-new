<section class="tabs-section x-py-[32px] md:x-py-[40px]">
    <div class="x-max-w-[1440px] x-mx-auto md:x-px-[50px]">

        <!-- Tab Headers -->
        <div class="tabs x-flex x-flex-row x-gap-[32px] x-justify-center">
            <button class="tab-button related current x-text-[16px]" checked>Related Products</button>
            <button class="tab-button recent x-text-[16px]">Recently Viewed</button>
        </div>

        <!-- Related Products -->
        <div class="product-recommendations x-w-full md:x-grid x-flex md:x-grid-cols-4 x-flex-row x-overflow-x-auto x-snap-x x-snap-mandatory x-overflow-hidden no-scrollbar"
            data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related">
            {% assign delay = 0 %}
            {%- if recommendations.performed and recommendations.products_count > 0 -%}
                {%- for recommended_product in recommendations.products -%}
                    <div 
                        data-aos="fade-in"
                        data-aos-duration="800"
                        data-aos-once="true"
                        data-aos-delay="{{ delay }}"
                        class="x-w-full x-aspect-square x-snap-start"
                    >
                        {% render 'custom-product-card', product: recommended_product %}
                    </div>
                    {% assign delay = delay | plus: 100 %}                
                {%- endfor -%}
            {%- endif -%}
        </div>

        <!-- Recently Viewed -->
        <div class="product-recents x-w-full md:x-grid x-flex md:x-grid-cols-4 x-flex-row x-overflow-x-auto x-snap-x x-snap-mandatory x-overflow-hidden no-scrollbar">
        </div>
    </div>
</section>

<script>
    $(document).ready(function () {
        addRecentlyViewedProduct('{{ product.handle }}');
        handleTabSwitch();
        loadShopifyRecommendations();
        handleRecentlyViewedProducts();
    });

    // attach aos effect to recently viewed products - prince #3
    function addAOSEffectToRecentlyViewedProducts() {
        console.log('Adding AOS effect to recently viewed products');
        $('.product-recents').children().each(function (index) {
            $(this)
                .attr('data-aos', 'fade-in')
                .attr('data-aos-duration', '800')
                .attr('data-aos-delay', `${index * 100}`)
                .attr('data-aos-once', 'true');
        });
    }

    // so i think kailangan ibutang pud ang delay diri? - questions ni nex
    // index needed to know when to start applying AOS effect - prince #1
    
    let current = [];

    function handleRecentlyViewedProducts() {
        let productHandles = getRecentlyViewedProducts();
        if (productHandles.length === 0) return;
        productHandles.slice(0, 4).forEach((productHandle, index) => {
            current.push(false)
            retrieveAndAppendRecentProduct(productHandle, index);
        });
    }
    
    // so i researched about the params pero kapoy na ata akong utok so i'll leave this to you for the delay 
    // add aos effect to recently viewed products after all products are loaded - prince #2
    function retrieveAndAppendRecentProduct(productHandle, index) {
        $.ajax({
            url: `/products/${productHandle}?view=card`,
            method: 'GET',
            success: function (response) {
                $('.product-recents').append(response);
                current[index] = true;
                let checker = arr => arr.every(v => v === true);
                if (checker(current)) {
                    addAOSEffectToRecentlyViewedProducts();
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    // added aos on-click effect trigger on children to tab switches - prince #4
    function handleTabSwitch() {
        $('.tab-button').click(function () {
            $('.tab-button').removeClass('current');
            $(this).addClass('current');

            if ($(this).hasClass('related')) {
                $('.product-recents').css('height', '0px');
                $('.product-recommendations').css('height', 'auto');

                $('.product-recommendations').children().each(function () {
                    $(this).addClass('aos-no-transition');
                    $(this).removeClass('aos-animate');

                    setTimeout(() => {
                        $(this).removeClass('aos-no-transition');
                        $(this).addClass('aos-animate');
                    }, 100);
                });
            }

            if ($(this).hasClass('recent')) {
                $('.product-recommendations').css('height', '0px');
                $('.product-recents').css('height', 'auto');

                $('.product-recents').children().each(function () {
                    $(this).addClass('aos-no-transition');
                    $(this).removeClass('aos-animate');

                    setTimeout(() => {
                        $(this).removeClass('aos-no-transition');
                        $(this).addClass('aos-animate');
                    }, 100);
                });
            }
        });
    }

    function loadShopifyRecommendations() {
        const productRecommendationsSection = document.querySelector('.product-recommendations');
        const url = productRecommendationsSection.dataset.url;

        if (!url) return;

        fetch(url)
            .then((response) => response.text())
            .then((html) => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const recommendations = doc.querySelector('.product-recommendations');

                if (recommendations) {
                    productRecommendationsSection.innerHTML = recommendations.innerHTML;
                } else {
                    productRecommendationsSection.style.display = 'none'; // Hide if no recommendations found
                }

            })
            .catch((e) => {
                console.error('Error loading related products:', e);
            });
    }

    function getRecentlyViewedProducts() {
        let viewedProducts = [];
        let cookie = Cookies.get('recently_viewed_products');
        if (cookie) {
            viewedProducts = JSON.parse(cookie);
        }
        return viewedProducts;
    }

    function addRecentlyViewedProduct(productHandle) {
        let viewedProducts = getRecentlyViewedProducts();
        let index = viewedProducts.indexOf(productHandle);

        if (index > -1) {
            viewedProducts.splice(index, 1);
        }

        viewedProducts.unshift(productHandle);
        Cookies.set('recently_viewed_products', JSON.stringify(viewedProducts), { expires: 30, path: '/' });
    }
</script>

<style>
    .aos-no-transition {
        transition: none !important;
    }
    
    .tab-button {
        padding: 10px;
        cursor: pointer;
        border-bottom: 2.5px solid transparent;
        color: rgb(184, 184, 184);
        transition: all 0.3s ease-in-out;
    }

    .tab-button.current {
        border-color: #757575;
        color: inherit;
    }

    .product-recommendations {
        height: auto;
    }

    .product-recents {
        height: 0px;
    }
</style>